diff --git a/src/color.h b/src/color.h
new file mode 100644
index 000000000..e84b06672
--- /dev/null
+++ b/src/color.h
@@ -0,0 +1,12 @@
+#ifndef COLOR_H
+#define COLOR_H
+
+#define C_RESET   "\033[0m"
+#define C_RED     "\033[31m"
+#define C_GREEN   "\033[32m"
+#define C_YELLOW  "\033[33m"
+#define C_BLUE    "\033[34m"
+#define C_MAGENTA "\033[35m"
+#define C_CYAN    "\033[36m"
+
+#endif
diff --git a/src/futex.c b/src/futex.c
index 6fa557287..da69f4cbc 100644
--- a/src/futex.c
+++ b/src/futex.c
@@ -25,6 +25,7 @@
 #include "xlat/futexops.h"
 #include "xlat/futexwakeops.h"
 #include "xlat/futexwakecmps.h"
+#include "color.h"
 
 static int
 do_futex(struct tcb *const tcp, const print_obj_by_addr_fn print_ts)
diff --git a/src/ioctl.c b/src/ioctl.c
index f4995caca..8f7757f24 100644
--- a/src/ioctl.c
+++ b/src/ioctl.c
@@ -12,6 +12,7 @@
 #include "defs.h"
 #include <linux/ioctl.h>
 #include "xlat/ioctl_dirs.h"
+#include "color.h"
 
 #if defined(SPARC) || defined(SPARC64)
 /*
@@ -534,10 +535,10 @@ SYS_FUNC(ioctl)
 				if (iop) {
 					if (ret)
 						tprint_alternative_value();
-					tprints_string(iop->symbol);
+					tprintf_string(C_YELLOW "%s" C_RESET, iop->symbol);
 					while ((iop = ioctl_next_match(iop))) {
 						tprint_alternative_value();
-						tprints_string(iop->symbol);
+						tprintf_string(C_YELLOW "%s" C_RESET, iop->symbol);
 					}
 				} else if (!ret) {
 					ioctl_print_code(tcp->u_arg[1]);
diff --git a/src/ipc.c b/src/ipc.c
index 3fc6fb739..e3951cf78 100644
--- a/src/ipc.c
+++ b/src/ipc.c
@@ -8,6 +8,7 @@
 
 #include "defs.h"
 #include "xlat/ipccalls.h"
+#include "color.h"
 
 static const char *ipc_arg_name[] = {
 	"first",
diff --git a/src/ipc_shm.c b/src/ipc_shm.c
index 546f46646..e6e4dae21 100644
--- a/src/ipc_shm.c
+++ b/src/ipc_shm.c
@@ -26,6 +26,7 @@
 
 #include "xlat/shm_resource_flags.h"
 #include "xlat/shm_flags.h"
+#include "color.h"
 
 SYS_FUNC(shmget)
 {
diff --git a/src/mem.c b/src/mem.c
index 4ff80ec26..a16a02b41 100644
--- a/src/mem.c
+++ b/src/mem.c
@@ -14,6 +14,7 @@
 #include "defs.h"
 #include <linux/mman.h>
 #include <sys/mman.h>
+#include "color.h"
 
 unsigned long
 get_pagesize(void)
@@ -91,7 +92,7 @@ print_mmap_flags(kernel_ulong_t flags)
 		 * print_xlat_u is not used here because the whole thing
 		 * is potentially inside a comment already.
 		 */
-		tprints_string("MAP_HUGE_SHIFT");
+		tprints_string(C_YELLOW "MAP_HUGE_SHIFT" C_RESET);
 		tprint_shift_end();
 	}
 
diff --git a/src/memfd_create.c b/src/memfd_create.c
index 0d495c769..adad1f78c 100644
--- a/src/memfd_create.c
+++ b/src/memfd_create.c
@@ -9,6 +9,7 @@
 #include "defs.h"
 #include <linux/memfd.h>
 #include "xlat/memfd_create_flags.h"
+#include "color.h"
 
 #ifndef MFD_NAME_MAX_LEN
 # define MFD_NAME_MAX_LEN (255 - (sizeof("memfd:") - 1))
@@ -53,7 +54,7 @@ SYS_FUNC(memfd_create)
 		 * print_xlat_u is not used here because the whole thing
 		 * is potentially inside a comment already.
 		 */
-		tprints_string("MFD_HUGE_SHIFT");
+		tprints_string(C_YELLOW "MFD_HUGE_SHIFT" C_RESET);
 		tprint_shift_end();
 	}
 
diff --git a/src/mmsghdr.c b/src/mmsghdr.c
index 549d74ba5..614a3970a 100644
--- a/src/mmsghdr.c
+++ b/src/mmsghdr.c
@@ -13,6 +13,7 @@
 #include "msghdr.h"
 #include "xstring.h"
 #include <limits.h>
+#include "color.h"
 
 static bool
 fetch_struct_mmsghdr_for_print(struct tcb *const tcp,
@@ -138,7 +139,7 @@ dumpiov_in_mmsghdr(struct tcb *const tcp, kernel_ulong_t addr)
 		fetched = fetch_struct_mmsghdr(tcp, addr, &mmsg);
 		if (!fetched)
 			break;
-		tprintf_string(" = %" PRI_klu " buffers in vector %u\n",
+		tprintf_string(" = " C_CYAN "%" PRI_klu C_RESET " buffers in vector " C_CYAN "%u" C_RESET "\n",
 			       (kernel_ulong_t) mmsg.msg_hdr.msg_iovlen, i);
 		dumpiov_upto(tcp, mmsg.msg_hdr.msg_iovlen,
 			     ptr_to_kulong(mmsg.msg_hdr.msg_iov),
diff --git a/src/netlink.c b/src/netlink.c
index bbd8d35c5..edb7605a0 100644
--- a/src/netlink.c
+++ b/src/netlink.c
@@ -52,6 +52,7 @@
 #include "xlat/nl_sock_diag_types.h"
 #include "xlat/nl_xfrm_types.h"
 #include "xlat/nlmsgerr_attrs.h"
+#include "color.h"
 
 /*
  * Fetch a struct nlmsghdr from the given address.
diff --git a/src/netlink_netlink_diag.c b/src/netlink_netlink_diag.c
index e0d689421..70829659e 100644
--- a/src/netlink_netlink_diag.c
+++ b/src/netlink_netlink_diag.c
@@ -19,6 +19,7 @@
 #include "xlat/netlink_diag_show.h"
 #include "xlat/netlink_socket_flags.h"
 #include "xlat/netlink_states.h"
+#include "color.h"
 
 DECL_NETLINK_DIAG_DECODER(decode_netlink_diag_req)
 {
diff --git a/src/numa.c b/src/numa.c
index c81d09d5f..ab26eff6a 100644
--- a/src/numa.c
+++ b/src/numa.c
@@ -8,6 +8,7 @@
  */
 
 #include "defs.h"
+#include "color.h"
 
 static bool
 print_node(struct tcb *tcp, void *elem_buf, size_t elem_size, void *data)
@@ -97,7 +98,7 @@ print_mode(struct tcb *const tcp, const kernel_ulong_t mode_arg)
 		tprint_comment_begin();
 
 	tprint_flags_begin();
-	tprints_string(mode_str);
+	tprintf_string(C_YELLOW "%s" C_RESET, mode_str);
 	tprint_flags_or();
 	printflags_ex(flags, NULL, XLAT_STYLE_ABBREV, mpol_mode_flags, NULL);
 	tprint_flags_end();
diff --git a/src/perf.c b/src/perf.c
index 80a85571f..684c73570 100644
--- a/src/perf.c
+++ b/src/perf.c
@@ -25,6 +25,7 @@
 #include "xlat/perf_hw_id.h"
 #include "xlat/perf_sw_ids.h"
 #include "xlat/perf_type_id.h"
+#include "color.h"
 
 struct pea_desc {
 	struct perf_event_attr *attr;
diff --git a/src/print_fields.h b/src/print_fields.h
index b5b020c00..59e37c02f 100644
--- a/src/print_fields.h
+++ b/src/print_fields.h
@@ -10,6 +10,7 @@
 # define STRACE_PRINT_FIELDS_H
 
 # include "static_assert.h"
+#include "color.h"
 
 # ifdef IN_STRACE
 
@@ -110,7 +111,7 @@ tprint_array_index_end(void)
 static inline void
 tprints_arg_begin(const char *name)
 {
-	STRACE_PRINTF("%s(", name);
+	STRACE_PRINTF(C_RED "%s" C_RESET "(", name);
 }
 
 static inline void
@@ -128,7 +129,7 @@ tprint_arg_end(void)
 static inline void
 tprints_arg_name_unconditionally(const char *name)
 {
-	STRACE_PRINTF("%s=", name);
+	STRACE_PRINTF(C_BLUE "%s" C_RESET "=", name);
 }
 
 static inline void
@@ -175,13 +176,13 @@ tprint_bitset_end(void)
 static inline void
 tprint_comment_begin(void)
 {
-	STRACE_PRINTS(" /* ");
+	STRACE_PRINTS(C_MAGENTA " /* ");
 }
 
 static inline void
 tprint_comment_end(void)
 {
-	STRACE_PRINTS(" */");
+	STRACE_PRINTS(" */" C_RESET);
 }
 
 static inline void
@@ -291,7 +292,7 @@ tprint_space(void)
 static inline void
 tprint_null(void)
 {
-	STRACE_PRINTS("NULL");
+	STRACE_PRINTS(C_CYAN "NULL" C_RESET);
 }
 
 static inline void
@@ -303,7 +304,7 @@ tprint_newline(void)
 static inline void
 tprints_field_name(const char *name)
 {
-	STRACE_PRINTF("%s=", name);
+	STRACE_PRINTF(C_BLUE "%s" C_RESET "=", name);
 }
 
 static inline void
@@ -337,19 +338,19 @@ tprint_sysret_end(void)
 }
 
 # define PRINT_VAL_D(val_)	\
-	STRACE_PRINTF("%lld", sign_extend_unsigned_to_ll(val_))
+	STRACE_PRINTF(C_CYAN "%lld" C_RESET, sign_extend_unsigned_to_ll(val_))
 
 # define PRINT_VAL_U(val_)	\
-	STRACE_PRINTF("%llu", zero_extend_signed_to_ull(val_))
+	STRACE_PRINTF(C_CYAN "%llu" C_RESET, zero_extend_signed_to_ull(val_))
 
 # define PRINT_VAL_X(val_)	\
-	STRACE_PRINTF("%#llx", zero_extend_signed_to_ull(val_))
+	STRACE_PRINTF(C_CYAN "%#llx" C_RESET, zero_extend_signed_to_ull(val_))
 
 # define PRINT_VAL_03O(val_)	\
-	STRACE_PRINTF("%#03llo", zero_extend_signed_to_ull(val_))
+	STRACE_PRINTF(C_CYAN "%#03llo" C_RESET, zero_extend_signed_to_ull(val_))
 
 # define PRINT_VAL_0X(val_)						\
-	STRACE_PRINTF("%#0*llx", (int) sizeof(val_) * 2,		\
+	STRACE_PRINTF(C_CYAN "%#0*llx" C_RESET, (int) sizeof(val_) * 2,		\
 		      zero_extend_signed_to_ull(val_))
 
 # define PRINT_VAL_ID(val_)						\
diff --git a/src/print_instruction_pointer.c b/src/print_instruction_pointer.c
index d2cc7628b..80692d6cf 100644
--- a/src/print_instruction_pointer.c
+++ b/src/print_instruction_pointer.c
@@ -15,8 +15,8 @@ print_instruction_pointer(struct tcb *tcp)
 	tprint_attribute_begin();
 	if (get_instruction_pointer(tcp, &ip)) {
 		tprintf_string(current_wordsize == 4
-			       ? "%08" PRI_klx
-			       : "%016" PRI_klx, ip);
+			? C_CYAN "%08" PRI_klx C_RESET
+			: C_CYAN "%016" PRI_klx C_RESET, ip);
 	} else {
 		tprints_string(current_wordsize == 4
 			       ? "????????"
diff --git a/src/print_syscall_number.c b/src/print_syscall_number.c
index 82a1eaa66..ec046e43f 100644
--- a/src/print_syscall_number.c
+++ b/src/print_syscall_number.c
@@ -6,13 +6,14 @@
  */
 
 #include "defs.h"
+#include "color.h"
 
 void
 print_syscall_number(struct tcb *tcp)
 {
 	tprint_attribute_begin();
 	if (tcp->true_scno != (kernel_ulong_t) -1)
-		tprintf_string("%4" PRI_klu, tcp->true_scno);
+		tprintf_string(C_CYAN "%4" PRI_klu C_RESET, tcp->true_scno);
 	else
 		tprint_unavailable();
 	tprint_attribute_end();
diff --git a/src/printmode.c b/src/printmode.c
index baab46449..a718627cf 100644
--- a/src/printmode.c
+++ b/src/printmode.c
@@ -16,6 +16,7 @@
 #include <sys/stat.h>
 
 #include "xlat/modetypes.h"
+#include "color.h"
 
 void
 print_symbolic_mode_t(const unsigned int mode)
@@ -31,13 +32,21 @@ print_symbolic_mode_t(const unsigned int mode)
 	if (!ifmt || xlat_verbose(xlat_verbosity) == XLAT_STYLE_RAW)
 		return;
 
-	(xlat_verbose(xlat_verbosity) == XLAT_STYLE_ABBREV
-		? tprintf_string : tprintf_comment)("%s%s%s%s%s%#03o",
+	if(xlat_verbose(xlat_verbosity) == XLAT_STYLE_ABBREV) {
+		tprintf_string(C_YELLOW "%s" C_RESET "%s%s%s%s" C_CYAN "%#03o" C_RESET,
+			ifmt, ifmt[0] ? "|" : "",
+			(mode & S_ISUID) ? C_YELLOW "S_ISUID" C_RESET "|" : "",
+			(mode & S_ISGID) ? C_YELLOW "S_ISGID" C_RESET "|" : "",
+			(mode & S_ISVTX) ? C_YELLOW "S_ISVTX" C_RESET "|" : "",
+			mode & ~(S_IFMT|S_ISUID|S_ISGID|S_ISVTX));
+	} else {
+		tprintf_comment("%s%s%s%s%s%#03o",
 			ifmt, ifmt[0] ? "|" : "",
 			(mode & S_ISUID) ? "S_ISUID|" : "",
 			(mode & S_ISGID) ? "S_ISGID|" : "",
 			(mode & S_ISVTX) ? "S_ISVTX|" : "",
 			mode & ~(S_IFMT|S_ISUID|S_ISGID|S_ISVTX));
+	}
 }
 
 void
diff --git a/src/ptrace.c b/src/ptrace.c
index 1615256f1..cb411e683 100644
--- a/src/ptrace.c
+++ b/src/ptrace.c
@@ -31,6 +31,7 @@
 #include "xlat/compat_ptrace_cmds.h"
 #include "xlat/ptrace_setoptions_flags.h"
 #include "xlat/ptrace_peeksiginfo_flags.h"
+#include "color.h"
 
 #define uoff(member)	offsetof(struct user, member)
 #define XLAT_UOFF(member)	{ uoff(member), "offsetof(struct user, " #member ")" }
diff --git a/src/s390.c b/src/s390.c
index 3e237e639..e303a567a 100644
--- a/src/s390.c
+++ b/src/s390.c
@@ -16,6 +16,7 @@
 # include "xlat/s390_guarded_storage_commands.h"
 # include "xlat/s390_runtime_instr_commands.h"
 # include "xlat/s390_sthyi_function_codes.h"
+#include "color.h"
 
 /*
  * Since, for some reason, kernel doesn't expose all these nice constants and
@@ -510,7 +511,7 @@ print_sthyi_machine(struct tcb *tcp, struct sthyi_machine *hdr, uint16_t size,
 
 	CHECK_SIZE_EX(hdr, last_decoded, size, "machine structure");
 
-	tprints_string("/* machine */ ");
+	tprints_string(C_MAGENTA "/* machine */ " C_RESET);
 	tprint_struct_begin();
 	if (!abbrev(tcp)) {
 		if (hdr->infmflg1) { /* Reserved */
@@ -620,7 +621,7 @@ print_sthyi_partition(struct tcb *tcp, struct sthyi_partition *hdr,
 
 	*mt = !!(hdr->infpflg1 & 0x80);
 
-	tprints_string("/* partition */ ");
+	tprints_string(C_MAGENTA "/* partition */ " C_RESET);
 	tprint_struct_begin();
 	PRINT_FIELD_0X(*hdr, infpflg1);
 	if (!abbrev(tcp) && hdr->infpflg1)
@@ -791,7 +792,7 @@ print_funcs(const uint8_t funcs[8])
 			tprint_comment_begin();
 			cont = true;
 		}
-		tprintf_string("%u: %s", i, func_descs[i]);
+		tprintf_string(C_CYAN "%u" C_RESET ": %s", i, func_descs[i]);
 	}
 
 	if (cont)
@@ -806,7 +807,7 @@ print_sthyi_hypervisor(struct tcb *tcp, struct sthyi_hypervisor *hdr,
 
 	CHECK_SIZE_EX(hdr, last_decoded, size, "hypervisor %d structure", num);
 
-	tprintf_string("/* hypervisor %d */ ", num);
+	tprintf_string(C_MAGENTA "/* hypervisor %d */ " C_RESET, num);
 	tprint_struct_begin();
 	PRINT_FIELD_0X(*hdr, infyflg1);
 	if (!abbrev(tcp) && hdr->infyflg1)
@@ -922,7 +923,7 @@ print_sthyi_guest(struct tcb *tcp, struct sthyi_guest *hdr, uint16_t size,
 {
 	CHECK_SIZE(hdr, size, "guest %d structure", num);
 
-	tprintf_string("/* guest %d */ ", num);
+	tprintf_string(C_MAGENTA "/* guest %d */ " C_RESET, num);
 	tprint_struct_begin();
 	PRINT_FIELD_0X(*hdr, infgflg1);
 	if (!abbrev(tcp) && hdr->infgflg1)
@@ -1132,7 +1133,7 @@ print_sthyi_buf(struct tcb *tcp, kernel_ulong_t ptr)
 	tprint_struct_begin();
 
 	/* Header */
-	tprints_string("/* header */ ");
+	tprints_string(C_MAGENTA "/* header */ " C_RESET);
 	tprint_struct_begin();
 	PRINT_FIELD_0X(*hdr, infhflg1);
 
@@ -1350,7 +1351,7 @@ guard_storage_print_gsepl(struct tcb *tcp, uint64_t addr)
 	/* Since it is 64-bit even on 31-bit s390... */
 	if (sizeof(addr) > current_klongsize &&
 	    addr >= (1ULL << (current_klongsize * 8))) {
-		tprintf_string("%#" PRIx64, addr);
+		tprintf_string(C_CYAN "%#" PRIx64 C_RESET, addr);
 
 		return;
 	}
diff --git a/src/signal.c b/src/signal.c
index 64ff6d5a6..076955002 100644
--- a/src/signal.c
+++ b/src/signal.c
@@ -15,6 +15,7 @@
 #include "defs.h"
 #include "nsig.h"
 #include "xstring.h"
+#include "color.h"
 
 /* The libc headers do not define this constant since it should only be
    used by the implementation.  So we define it here.  */
@@ -241,8 +242,12 @@ printsignal(int nr)
 		PRINT_VAL_D(nr);
 	if (!str || xlat_verbose(xlat_verbosity) == XLAT_STYLE_RAW)
 		return;
-	(xlat_verbose(xlat_verbosity) == XLAT_STYLE_VERBOSE
-		? tprints_comment : tprints_string)(str);
+
+	if(xlat_verbose(xlat_verbosity) == XLAT_STYLE_VERBOSE) {
+		tprints_comment(str);
+	} else {
+		tprintf_string(C_YELLOW "%s" C_RESET, str);
+	}
 }
 
 static void
@@ -831,8 +836,11 @@ SYS_FUNC(rt_sigtimedwait_time64)
 
 SYS_FUNC(restart_syscall)
 {
-	tprintf_string("<... resuming interrupted %s ...>",
-		tcp->s_prev_ent ? tcp->s_prev_ent->sys_name : "system call");
+	if(tcp->s_prev_ent) {
+		tprintf_string("<... resuming interrupted " C_RED "%s" C_RESET " ...>", tcp->s_prev_ent->sys_name);
+	} else {
+		tprints_string("<... resuming interrupted system call ...>");
+	}
 
 	return RVAL_DECODED;
 }
diff --git a/src/sockaddr.c b/src/sockaddr.c
index 553286148..7664a9bee 100644
--- a/src/sockaddr.c
+++ b/src/sockaddr.c
@@ -43,6 +43,7 @@
 #include "xlat/bluetooth_l2_cid.h"
 #include "xlat/bluetooth_l2_psm.h"
 #include "xlat/hci_channels.h"
+#include "color.h"
 
 #include "xlat/rxrpc_services.h"
 
@@ -185,7 +186,7 @@ print_inet_addr(const int af,
 			if (var_name &&
 			    (xlat_verbose(xlat_verbosity) == XLAT_STYLE_ABBREV)) {
 				tprint_arg_next();
-				tprintf_string("&%s", var_name);
+				tprintf_string(C_BLUE "&%s" C_RESET, var_name);
 			}
 			tprint_arg_end();
 
@@ -702,7 +703,7 @@ print_bluetooth_l2_psm(uint16_t psm)
 		tprint_plus();
 		PRINT_VAL_U(psm_he - L2CAP_PSM_DYN_START);
 	} else {
-		tprints_string("L2CAP_PSM_???");
+		tprints_string(C_YELLOW "L2CAP_PSM_???" C_RESET);
 	}
 
 	if (xlat_verbose(xlat_verbosity) == XLAT_STYLE_VERBOSE || !psm_str)
@@ -737,7 +738,7 @@ print_bluetooth_l2_cid(uint16_t cid)
 		tprint_plus();
 		PRINT_VAL_U(cid_he - L2CAP_CID_DYN_START);
 	} else {
-		tprints_string("L2CAP_CID_???");
+		tprints_string(C_YELLOW "L2CAP_CID_???" C_RESET);
 	}
 
 	if (xlat_verbose(xlat_verbosity) == XLAT_STYLE_VERBOSE || !cid_str)
diff --git a/src/strace.c b/src/strace.c
index 0f88bb00a..a217f718d 100644
--- a/src/strace.c
+++ b/src/strace.c
@@ -44,6 +44,8 @@
 #include "wait.h"
 #include "secontext.h"
 
+#include "color.h"
+
 /* In some libc, these aren't declared. Do it ourself: */
 extern char **environ;
 extern int optind;
@@ -97,6 +99,12 @@ static int rflag_scale = 1000;
 static int rflag_width = 6;
 static bool print_pid_pfx;
 
+/* -1 = auto
+ *  0 = never
+ *  1 = always
+ */
+int no_color_flag = -1;
+
 static unsigned int version_verbosity;
 
 /* -I n */
@@ -361,6 +369,8 @@ Filtering:\n\
                  print only syscalls that returned with an error code\n\
 \n\
 Output format:\n\
+  --color[=WHEN]\n\
+                 colorize the output; WHEN can be 'always', 'auto' (default), or 'never'\n\
   -a COLUMN, --columns=COLUMN\n\
                  alignment COLUMN for printing syscall results (default %d)\n\
   -e abbrev=SET, --abbrev=SET\n\
@@ -749,7 +759,23 @@ static void
 tvprintf(const char *const fmt, va_list args)
 {
 	if (current_tcp) {
-		int n = vfprintf(current_tcp->outf, fmt, args);
+		int n;
+		if(no_color_flag) {
+			char new_fmt[strlen(fmt) + 1];
+			int i = 0;
+			for(const char *c = fmt; *c; c++) {
+				if(*c == '\033') {
+					for(c++; *c && *c != 'm'; c++);
+					continue;
+				}
+
+				new_fmt[i++] = *c;
+			}
+			new_fmt[i] = '\0';
+			n = vfprintf(current_tcp->outf, new_fmt, args);
+		} else
+			n = vfprintf(current_tcp->outf, fmt, args);
+
 		if (n < 0) {
 			/* very unlikely due to vfprintf buffering */
 			outf_perror(current_tcp);
@@ -775,7 +801,22 @@ void
 tprints_string(const char *str)
 {
 	if (current_tcp) {
-		int n = fputs_unlocked(str, current_tcp->outf);
+		int n;
+		if(no_color_flag) {
+			char new_str[strlen(str) + 1];
+			int i = 0;
+			for(const char *c = str; *c; c++) {
+				if(*c == '\033') {
+					for(c++; *c && *c != 'm'; c++);
+					continue;
+				}
+				new_str[i++] = *c;
+			}
+			new_str[i] = '\0';
+			n = fputs_unlocked(new_str, current_tcp->outf);
+		} else
+			n = fputs_unlocked(str, current_tcp->outf);
+
 		if (n >= 0) {
 			current_tcp->curcol += strlen(str);
 			return;
@@ -918,7 +959,7 @@ printleader(struct tcb *tcp)
 		else
 			xsprintf(str, "%lld", (long long) local);
 		if (tflag_width)
-			tprintf_string("%s.%0*ld ", str, tflag_width,
+			tprintf_string("%s." C_CYAN "%0*ld" C_RESET " ", str, tflag_width,
 				       (long) ts.tv_nsec / tflag_scale);
 		else
 			tprintf_string("%s ", str);
@@ -936,10 +977,10 @@ printleader(struct tcb *tcp)
 		ts_sub(&dts, &ts, &ots);
 		ots = ts;
 
-		tprintf_string("%s%6ld",
+		tprintf_string("%s" C_CYAN "%6ld" C_RESET,
 			       tflag_format ? "(+" : "", (long) dts.tv_sec);
 		if (rflag_width) {
-			tprintf_string(".%0*ld", rflag_width,
+			tprintf_string("." C_CYAN "%0*ld" C_RESET, rflag_width,
 				       (long) dts.tv_nsec / rflag_scale);
 		}
 		tprints_string(tflag_format ? ") " : " ");
@@ -2336,6 +2377,7 @@ init(int argc, char *argv[])
 
 	enum {
 		GETOPT_SECCOMP = 0x100,
+		GETOPT_COLOR,
 		GETOPT_DAEMONIZE,
 		GETOPT_HEX_STR,
 		GETOPT_FOLLOWFORKS,
@@ -2369,6 +2411,7 @@ init(int argc, char *argv[])
 		GETOPT_QUAL_SECONTEXT,
 	};
 	static const struct option longopts[] = {
+		{ "color",		optional_argument, 0, GETOPT_COLOR },
 		{ "columns",		required_argument, 0, 'a' },
 		{ "output-append-mode",	no_argument,	   0, 'A' },
 		{ "detach-on",		required_argument, 0, 'b' },
@@ -2485,6 +2528,23 @@ init(int argc, char *argv[])
 		case 'D':
 			daemonized_tracer++;
 			break;
+		case GETOPT_COLOR:
+			if(optarg) {
+				if(!strcmp(optarg , "always"))
+					no_color_flag = 0;
+				else if(!strcmp(optarg, "never"))
+					no_color_flag = 1;
+				else if(!strcmp(optarg, "auto"))
+					no_color_flag = -1;
+				else
+					error_msg_and_die("invalid argument \"%s\" for \"--color\"\n"
+							  "Valid arguments are:\n"
+							  "  - \"always\"\n"
+							  "  - \"never\"\n"
+							  "  - \"auto\"",
+							  optarg);
+			}
+			break;
 		case GETOPT_DAEMONIZE:
 			daemonized_tracer_long =
 				find_arg_val(optarg, daemonize_str,
@@ -3126,6 +3186,14 @@ init(int argc, char *argv[])
 			      qflag_short == 2 ? qqflag_qual : qqqflag_qual);
 	}
 
+	// --color=auto (default)
+	if(no_color_flag == -1)
+		no_color_flag = !isatty(STDERR_FILENO);
+
+	// if we set NO_COLOR or use --output
+	if((getenv("NO_COLOR")) || outfname)
+		no_color_flag = 1;
+
 	/*
 	 * startup_child() must be called before the signal handlers get
 	 * installed below as they are inherited into the spawned process.
diff --git a/src/swapon.c b/src/swapon.c
index 678989d7d..fca03f85a 100644
--- a/src/swapon.c
+++ b/src/swapon.c
@@ -10,6 +10,7 @@
 #include <sys/swap.h>
 
 #include "xlat/swap_flags.h"
+#include "color.h"
 
 SYS_FUNC(swapon)
 {
diff --git a/src/syscall.c b/src/syscall.c
index 84249a4d2..4abda6414 100644
--- a/src/syscall.c
+++ b/src/syscall.c
@@ -25,6 +25,7 @@
 #include "retval.h"
 #include <limits.h>
 #include <fcntl.h>
+#include "color.h"
 
 /* for struct iovec */
 #include <sys/uio.h>
@@ -421,7 +422,7 @@ print_err(int64_t err, bool negated)
 	const char *str = err_name(negated ? -err : err);
 
 	if (!str || xlat_verbose(xlat_verbosity) != XLAT_STYLE_ABBREV)
-		tprintf_string(negated ? "%" PRId64 : "%" PRIu64, err);
+		tprintf_string(negated ? C_CYAN "%" PRId64 C_RESET : C_CYAN "%" PRIu64 C_RESET, err);
 	if (!str || xlat_verbose(xlat_verbosity) == XLAT_STYLE_RAW)
 		return;
 	(xlat_verbose(xlat_verbosity) == XLAT_STYLE_ABBREV
@@ -443,7 +444,7 @@ print_err_ret(kernel_ulong_t ret, unsigned long u_error)
 		tprints_sysret_string("strerror", strerror(u_error));
 	} else {
 		tprints_sysret_next("strerror");
-		tprintf_string("(errno %lu)", u_error);
+		tprintf_string("(errno " C_CYAN "%lu" C_RESET ")", u_error);
 	}
 }
 
@@ -757,7 +758,7 @@ print_syscall_resume(struct tcb *tcp)
 	    || (tcp->flags & TCB_REPRINT)) {
 		tcp->flags &= ~TCB_REPRINT;
 		printleader(tcp);
-		tprintf_string("<... %s resumed>", tcp_sysent(tcp)->sys_name);
+		tprintf_string("<... " C_RED "%s" C_RESET " resumed>", tcp_sysent(tcp)->sys_name);
 	}
 	printing_tcp = tcp;
 }
@@ -1012,7 +1013,7 @@ syscall_exiting_trace(struct tcb *tcp, struct timespec *ts, int res)
 		ts_sub(ts, ts, &tcp->etime);
 		PRINT_VAL_D(ts->tv_sec);
 		if (Tflag_width) {
-			tprintf_string(".%0*ld", Tflag_width,
+			tprintf_string("." C_CYAN "%0*ld" C_RESET, Tflag_width,
 				       (long) ts->tv_nsec / Tflag_scale);
 		}
 		tprint_associated_info_end();
diff --git a/src/sysctl.c b/src/sysctl.c
index a4d26f75c..223960f44 100644
--- a/src/sysctl.c
+++ b/src/sysctl.c
@@ -12,6 +12,7 @@
 #include <linux/sysctl.h>
 typedef struct __sysctl_args struct_sysctl_args;
 #include MPERS_DEFS
+#include "color.h"
 
 SYS_FUNC(sysctl)
 {
diff --git a/src/term.c b/src/term.c
index 8484e7010..adbfc86ef 100644
--- a/src/term.c
+++ b/src/term.c
@@ -41,6 +41,7 @@
 #endif
 
 #include "xlat/term_cmds_overlapping.h"
+#include "color.h"
 
 static void
 decode_oflag(uint64_t val)
diff --git a/src/util.c b/src/util.c
index 0d6d7da45..683f58a33 100644
--- a/src/util.c
+++ b/src/util.c
@@ -32,6 +32,7 @@
 #include "string_to_uint.h"
 #include "xlat.h"
 #include "xstring.h"
+#include "color.h"
 
 const struct xlat_data *
 find_xlat_val_ex(const struct xlat_data * const items, const char * const s,
@@ -790,7 +791,7 @@ printdev(struct tcb *tcp, int fd, const char *path, const struct finfo *finfo)
 				       QUOTE_OMIT_LEADING_TRAILING_QUOTES,
 				       "<>");
 		tprint_associated_info_begin();
-		tprintf_string("%s %u:%u",
+		tprintf_string(C_BLUE "%s" C_RESET " " C_CYAN "%u" C_RESET ":" C_CYAN "%u" C_RESET,
 			       (finfo->type == FINFO_DEV_BLK)? "block" : "char",
 			       finfo->dev.major, finfo->dev.minor);
 		if (is_ptmx(finfo) && finfo->dev.tty_index >= 0)
@@ -1328,7 +1329,7 @@ print_quoted_string_ex(const char *str, unsigned int size,
 	}
 
 	rc = string_quote(str, outstr, size, style, escape_chars);
-	tprints_string(outstr);
+	tprintf_string(C_GREEN "%s" C_RESET, outstr);
 
 	if (((style & (QUOTE_0_TERMINATED | QUOTE_EXPECT_TRAILING_0))
 	     == (QUOTE_0_TERMINATED | QUOTE_EXPECT_TRAILING_0)) && rc) {
@@ -1484,7 +1485,7 @@ printstr_ex(struct tcb *const tcp, const kernel_ulong_t addr,
 		   && ((style & (QUOTE_0_TERMINATED | QUOTE_EXPECT_TRAILING_0))
 		       || len > max_strlen);
 
-	tprints_string(outstr);
+	tprintf_string(C_GREEN "%s" C_RESET, outstr);
 	if (ellipsis)
 		tprint_more_data_follows();
 
@@ -1525,7 +1526,7 @@ print_nonzero_bytes(struct tcb *const tcp,
 		ret = false;
 	} else {
 		prefix_fun();
-		tprintf_string("/* bytes %u..%u */ ", start_offs, total_len - 1);
+		tprintf_string(C_MAGENTA "/* bytes %u..%u */ " C_RESET, start_offs, total_len - 1);
 
 		print_quoted_string(str, size, style);
 
@@ -1583,8 +1584,7 @@ dumpiov_upto(struct tcb *const tcp, const int len, const kernel_ulong_t addr,
 			data_size -= iov_len;
 			/* include the buffer number to make it easy to
 			 * match up the trace with the source */
-			tprintf_string(" * %" PRI_klu " bytes in buffer %d\n",
-				       iov_len, i);
+			tprintf_string(" * " C_CYAN "%" PRI_klu C_RESET " bytes in buffer " C_CYAN "%d" C_RESET "\n", iov_len, i);
 			dumpstr(tcp, iov_iov_base(i), iov_len);
 		}
 	}
@@ -1724,7 +1724,7 @@ dumpstr(struct tcb *const tcp, const kernel_ulong_t addr,
 			src++;
 		} while (++i & DUMPSTR_BYTES_MASK);
 
-		tprintf_string(" | %0*" PRI_klx "  %s |\n",
+		tprintf_string(" | " C_CYAN "%0*" PRI_klx C_RESET "  %s |\n",
 			       offs_chars, i - DUMPSTR_WIDTH_BYTES, outbuf);
 	}
 }
diff --git a/src/wait.c b/src/wait.c
index 8092674c5..f9f310404 100644
--- a/src/wait.c
+++ b/src/wait.c
@@ -20,6 +20,7 @@
 
 #include "xlat/wait4_options.h"
 #include "xlat/ptrace_events.h"
+#include "color.h"
 
 static int
 printstatus(int status)
@@ -37,7 +38,7 @@ printstatus(int status)
 		int sig = WSTOPSIG(status);
 		tprintf_string("{WIFSTOPPED(s) && WSTOPSIG(s) == %s%s}",
 			       sprintsigname(sig & 0x7f),
-			       sig & 0x80 ? " | 0x80" : "");
+			       sig & 0x80 ? " |" C_CYAN "0x80" C_RESET : "");
 		status &= ~W_STOPCODE(sig);
 	} else if (WIFSIGNALED(status)) {
 		tprintf_string("{WIFSIGNALED(s) && WTERMSIG(s) == %s%s}",
@@ -45,7 +46,7 @@ printstatus(int status)
 			       WCOREDUMP(status) ? " && WCOREDUMP(s)" : "");
 		status &= ~(W_EXITCODE(0, WTERMSIG(status)) | WCOREFLAG);
 	} else if (WIFEXITED(status)) {
-		tprintf_string("{WIFEXITED(s) && WEXITSTATUS(s) == %d}",
+		tprintf_string("{WIFEXITED(s) && WEXITSTATUS(s) == " C_CYAN "%d" C_RESET "}",
 			       WEXITSTATUS(status));
 		exited = 1;
 		status &= ~W_EXITCODE(WEXITSTATUS(status), 0);
diff --git a/src/xlat.c b/src/xlat.c
index f961552cc..6d960d7e5 100644
--- a/src/xlat.c
+++ b/src/xlat.c
@@ -12,6 +12,7 @@
 #include "defs.h"
 #include "xstring.h"
 #include <stdarg.h>
+#include "color.h"
 
 static enum xlat_style
 get_xlat_style(enum xlat_style style)
@@ -47,7 +48,7 @@ sprint_xlat_val(uint64_t val, enum xlat_style style)
 static void
 print_xlat_val(uint64_t val, enum xlat_style style)
 {
-	tprints_string(sprint_xlat_val(val, style));
+	tprintf_string(C_CYAN "%s" C_RESET, sprint_xlat_val(val, style));
 }
 
 static int
@@ -244,7 +245,7 @@ printxvals_ex(const uint64_t val, const char *dflt, enum xlat_style style,
 				print_xlat_val(val, style);
 				tprints_comment(str);
 			} else {
-				tprints_string(str);
+				tprintf_string(C_YELLOW "%s" C_RESET, str);
 			}
 
 			goto printxvals_ex_end;
@@ -454,7 +455,7 @@ printflags_ex(uint64_t flags, const char *dflt, enum xlat_style style,
 					tprint_flags_or();
 				else if (need_comment)
 					tprint_comment_begin();
-				tprints_string(xlat->data[idx].str);
+				tprintf_string(C_YELLOW "%s" C_RESET, xlat->data[idx].str);
 				flags &= ~v;
 			}
 			if (!flags)
@@ -499,7 +500,7 @@ print_xlat_ex(const uint64_t val, const char *str, uint32_t style)
 				print_xlat_val(val, style);
 				tprints_comment(str);
 			} else {
-				tprints_string(str);
+				tprintf_string(C_YELLOW "%s" C_RESET, str);
 			}
 			break;
 		}
